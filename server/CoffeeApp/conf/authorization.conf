# AuthRole Based Access Control (RBAC)
# ~~~~~

// descomenta la siguiente instrucción solo para la primera ejecución o cuando lo requiera
play.modules.enabled += "security.schedulingTasks.loadRBACtablesOnStart.LoadRBACModule"

authorization.enabled = true


play.rbac.roles_permissions {
  #
  # auth_group
  #
  auth_group_reader = [
    AuthGroups.findAll
  ]
  #
  # auth_readerole
  #
  auth_permission_reader = [
    AuthPermissions.findAll
  ]
  #
  # auth_permission
  #
  auth_readerole_reader = [
    AuthRoles.findAll
  ]
  #
  # auth_token
  #
  auth_token_manager = [
    RevokeToken.revokeAll
  ]


  #
  # providerType
  #
  providerType_reader = [
    controllers.ProviderTypes.findById,
    controllers.ProviderTypes.findAllAll,
    controllers.ProviderTypes.getProviderTypesByName
  ]

  providerType_manager = [
    controllers.ProviderTypes.findAllAll,
    controllers.ProviderTypes.findById,
    controllers.ProviderTypes.getProviderTypesByName
  ]

  #
  # provider
  #
  provider_reader = [
    controllers.Providers.findById,
    controllers.Providers.findAll,
    controller.Providers.findAllSearch,
    controllers.Providers.getByIdentificationDoc,
    controllers.Providers.getProvidersByName,
    controllers.Providers.getByTypeProvider,
    controllers.Providers.getByNameDocByTypeProvider,
    controllers.Providers.uploadPhotoProvider
  ]

  provider_manager = [
    controllers.Providers.findById,
    controllers.Providers.findAll,
    controller.Providers.findAllSearch,
    controllers.Providers.getByIdentificationDoc,
    controllers.Providers.getProvidersByName,
    controllers.Providers.getByTypeProvider,
    controllers.Providers.getByNameDocByTypeProvider,
    controllers.Providers.uploadPhotoProvider
    ccontrollers.Providers.create,
    controllers.Providers.update,
    controllers.Providers.delete,
    controllers.Providers.deletes
  ]

  #
  # invoice
  #
  invoice_reader = [
    controllers.Invoices.findAll,
    controllers.Invoices.findAllSearch,
    controllers.Invoices.getByDateByTypeProvider,
    controllers.Invoices.getByDateByProviderId,
    controllers.Invoices.getOpenByProviderId
  ]

  invoice_manager = [
    controllers.Invoices.findAll,
    controllers.Invoices.findAllSearch,
    controllers.Invoices.getByDateByTypeProvider,
    controllers.Invoices.getByDateByProviderId,
    controllers.Invoices.getOpenByProviderId,
    controllers.Invoices.createReceipt,
    controllers.Invoices.create,
    controllers.Invoices.buyHarvestsAndCoffe,
    controllers.Invoices.updateBuyHarvestsAndCoffe,
    controllers.Invoices.update,
    controllers.Invoices.delete
  ]

  #
  # unit
  #
  unit_reader = [
    controllers.Units.findById,
    controllers.Units.findAll
  ]

  unit_manager = [
    controllers.Units.findById,
    controllers.Units.findAll,
    controllers.Units.create,
    controllers.Units.update,
    controllers.Units.delete
  ]

  #
  # itemType
  #
  itemType_reader = [
    controllers.ItemTypes.findAll,
    controllers.ItemTypes.findAllSearch,
    controllers.ItemTypes.preCreate,
    controllers.ItemTypes.findById,
    controllers.ItemTypes.getByProviderTypeId,
    controllers.ItemTypes.getByNameItemType

  ]

  itemType_manager = [
    controllers.ItemTypes.findAll,
    controllers.ItemTypes.findAllSearch,
    controllers.ItemTypes.preCreate,
    controllers.ItemTypes.findById,
    controllers.ItemTypes.getByProviderTypeId,
    controllers.ItemTypes.getByNameItemType,
    controllers.ItemTypes.create,
    controllers.ItemTypes.update,
    controllers.ItemTypes.delete
  ]

  #
  # lot
  #
  lot_reader = [
    controllers.Lots.findAll,
    controllers.Lots.findAllSearch,
    controllers.Lots.getByNameLot,
    controllers.Lots.getByStatusLot,
    controllers.Lots.getByIdFarm,
    controllers.Lots.deletes
  ]

  lot_manager = [
    controllers.Lots.findAll,
    controllers.Lots.findAllSearch,
    controllers.Lots.preCreate,
    controllers.Lots.create,
    controllers.Lots.update,
    controllers.Lots.delete,
    controllers.Lots.getByNameLot,
    controllers.Lots.getByStatusLot,
    controllers.Lots.getByIdFarm,
    controllers.Lots.deletes
  ]

  #
  # farm
  #
  farm_reader = [
    controllers.Farms.findById,
    controllers.Farms.findAll,
    controllers.Farms.findAllSearch
  ]

  farm_manager = [
    controllers.Farms.findById,          
    controllers.Farms.findAll,         
    controllers.Farms.findAllSearch      
  ]

  #
  # purity
  #
  purity_reader = [
    controllers.Purities.findAll,
    controllers.Purities.findAllSearch,
    controllers.Purities.findById,
    controllers.Purities.getByNamePurity,
    controllers.Purities.getByStatusPurity
  ]

  purity_manager = [
    controllers.Purities.findAll,
    controllers.Purities.findAllSearch,
    controllers.Purities.findById,
    controllers.Purities.getByNamePurity,
    controllers.Purities.getByStatusPurity,
    controllers.Purities.preCreate,
    controllers.Purities.create,
    controllers.Purities.update,
    controllers.Purities.delete
  ]

  #
  # invoiceDetailPurity
  #
  invoiceDetailPurity_reader = [
    controllers.InvoiceDetailPurities.findAll,
    controllers.InvoiceDetailPurities.findById
  ]

  invoiceDetailPurity_manager = [
    controllers.InvoiceDetailPurities.findAll,
    controllers.InvoiceDetailPurities.findById,
    controllers.InvoiceDetailPurities.create,
    controllers.InvoiceDetailPurities.update,
    controllers.InvoiceDetailPurities.delete
  ]

  #
  # invoiceDetail
  #
  invoiceDetail_reader = [
    controllers.InvoiceDetails.findAll,
    controllers.InvoiceDetails.findAllSearch,
    controllers.InvoiceDetails.findById,
    controllers.InvoiceDetails.findAllByIdInvoice
  ]

  invoiceDetail_manager = [
    controllers.InvoiceDetails.findAll,
    controllers.InvoiceDetails.findAllSearch,
    controllers.InvoiceDetails.findById,
    controllers.InvoiceDetails.findAllByIdInvoice,
    controllers.InvoiceDetails.preCreate,
    controllers.InvoiceDetails.create,
    controllers.InvoiceDetails.update,
    controllers.InvoiceDetails.delete,
    controllers.InvoiceDetails.deleteAllByIdInvoiceAndDate
  ]

  #
  # store
  #
  store_reader = [
    controllers.Stores.findAll,
    Controllers.Stores.findAllSearch,
    controllers.Stores.findById,
    controllers.Stores.getByStatusStore
  ]

  store_manager = [
    controllers.Stores.findAll,
    Controllers.Stores.findAllSearch,
    controllers.Stores.findById,
    controllers.Stores.getByStatusStore,
    controllers.Stores.preCreate,
    controllers.Stores.create,
    controllers.Stores.update,
    controllers.Stores.delete
  ]

}

play.rbac.groups_roles {
  #
  # super_managerser
  #
  super = [
    store_manager,
    invoiceDetail_manager,
    invoiceDetailPurity_manager,
    purity_manager,
    farm_manager,
    lot_manager,
    itemType_manager,
    unit_manager,
    invoice_manager,
    provider_manager,
    providerType_manager
  ]

  #
  # client
  #
  client = [
    store_reader,
    invoiceDetail_manager,
    invoiceDetailPurity_manager,
    purity_reader,
    farm_manager,
    lot_reader,
    itemType_manager,
    unit_reader,
    invoice_reader,
    provider_reader,
    providerType_reader
  ]

  #
  # user
  #
  user = [
    store_reader,
    invoiceDetail_reader,
    invoiceDetailPurity_reader,
    purity_reader,
    farm_reader,
    lot_reader,
    itemType_reader,
    unit_reader,
    invoice_reader,
    provider_reader,
    providerType_reader
  ]
}


  play.rbac.groups_users {

    super = [
      "admin@admin.com",
      "marwin.campos@hecticus.com"
    ],
    client = [
      "shamuel.manrrique@hecticus.com"
    ],
    user = [
      "brayan.mendoza@hecticus.com"
    ]
  }

