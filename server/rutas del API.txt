GET     /providerType/:id                      controllers.ProviderTypes.findById(id : Long)
GET     /providerType/findAll/:index/:size     controllers.ProviderTypes.findAll(index: Integer, size: Integer)
GET    /providerType/getProviderTypesByName/:name/:order  controllers.ProviderTypes.getProviderTypesByName(name:String,order:String)


GET     /provider/:id                      controllers.Providers.findById(id : Long)
GET     /provider/findAll/:index/:size     controllers.Providers.findAll(index: Integer, size: Integer)
GET     /provider/getByIdentificationDoc/:IdentificationDoc   controllers.Providers.getByIdentificationDoc(IdentificationDoc: String)
GET     /provider/getProvidersByName/:name/:order  controllers.Providers.getProvidersByName(name:String,order:String)
GET     /provider/getByTypeProvider/:id_providertype/:order  controllers.Providers.getByTypeProvider(id_providertype: Long,order: String)
GET     /provider/getByNameDocByTypeProvider/:nameDoc/:id_providertype/:order  controllers.Providers.getByNameDocByTypeProvider(nameDoc: String, id_providertype: Long,order: String)

POST    /provider                          controllers.Providers.create()
PUT     /provider                          controllers.Providers.update()
DELETE  /provider/:id                      controllers.Providers.delete(id : Long)



GET     /invoice/:id                      controllers.Invoices.findById(id : Long)
GET     /invoice/findAll/:index/:size     controllers.Invoices.findAll(index: Integer, size: Integer)
GET     /invoice/getByDateByTypeProvider/:date/:typeProvider  controllers.Invoices.getByDateByTypeProvider(date: String, typeProvider: Integer)
GET     /invoice/getByDateByProviderId/:date/:ProviderId  controllers.Invoices.getByDateByProviderId(date: String, ProviderId: Long)
GET     /invoice/getOpenByProviderId/:ProviderId          controllers.Invoices.getOpenByProviderId(ProviderId : Long)

POST    /invoice                          controllers.Invoices.create()
PUT     /invoice                          controllers.Invoices.update()
DELETE  /invoice/:id                      controllers.Invoices.delete(id : Long)

GET     /unit/:id                      controllers.Units.findById(id : Long)
GET     /unit/findAll/:index/:size     controllers.Units.findAll(index: Integer, size: Integer)
POST    /unit                          controllers.Units.create()
PUT     /unit                          controllers.Units.update()
DELETE  /unit/:id                      controllers.Units.delete(id : Long)

GET     /itemType/:id                      controllers.ItemTypes.findById(id : Long)
GET     /itemType/findAll/:index/:size     controllers.ItemTypes.findAll(index: Integer, size: Integer)
GET     /itemType/getByProviderTypeId/:id_ProviderType/:status controllers.ItemTypes.getByProviderTypeId(id_ProviderType: Long, status:Integer )
GET     /itemType/getByNameItemType/:NameItemType/:order controllers.ItemTypes.getByNameItemType(NameItemType: String, order:String )


POST    /itemType                          controllers.ItemTypes.create()
PUT     /itemType                          controllers.ItemTypes.update()
DELETE  /itemType/:id                      controllers.ItemTypes.delete(id : Long)

GET     /lot/:id                      controllers.Lots.findById(id : Long)
GET     /lot/findAll/:index/:size     controllers.Lots.findAll(index: Integer, size: Integer)
GET     /lot/getByNameLot/:NameLot/:order controllers.Lots.getByNameLot(NameLot: String, order:String )
GET     /lot/getByStatusLot/:StatusLot/:order controllers.Lots.getByStatusLot(StatusLot: String, order:String )
POST    /lot                          controllers.Lots.create()
PUT     /lot                          controllers.Lots.update()
DELETE  /lot/:id                      controllers.Lots.delete(id : Long)

GET     /purity/:id                      controllers.Purities.findById(id : Long)
GET     /purity/findAll/:index/:size     controllers.Purities.findAll(index: Integer, size: Integer)
GET     /purity/getByNamePurity/:NamePurity/:order controllers.Purities.getByNamePurity(NamePurity: String, order:String )
GET     /purity/getByStatusPurity/:StatusPurity/:order controllers.Purities.getByStatusPurity(StatusPurity: String, order:String )
POST    /purity                          controllers.Purities.create()
PUT     /purity                          controllers.Purities.update()
DELETE  /purity/:id                      controllers.Purities.delete(id : Long)

GET     /invoiceDetailPurity/:id                      controllers.InvoiceDetailPurities.findById(id : Long)
GET     /invoiceDetailPurity/findAll/:index/:size     controllers.InvoiceDetailPurities.findAll(index: Integer, size: Integer)
POST    /invoiceDetailPurity                          controllers.InvoiceDetailPurities.create()
PUT     /invoiceDetailPurity                          controllers.InvoiceDetailPurities.update()
DELETE  /invoiceDetailPurity/:id                      controllers.InvoiceDetailPurities.delete(id : Long)

GET     /invoiceDetail/:id                      controllers.InvoiceDetails.findById(id : Long)
GET     /invoiceDetail/findAll/:index/:size     controllers.InvoiceDetails.findAll(index: Integer, size: Integer)
GET     /invoiceDetail/findAllByIdInvoice/:invoiceId                      controllers.InvoiceDetails.findAllByIdInvoice(invoiceId : Long)
POST    /invoiceDetail                         controllers.InvoiceDetails.create()
PUT     /invoiceDetail                          controllers.InvoiceDetails.update()
DELETE  /invoiceDetail/:id                      controllers.InvoiceDetails.delete(id : Long)


GET     /store/:id                      controllers.Stores.findById(id : Long)
GET     /store/findAll/:index/:size     controllers.Stores.findAll(index: Integer, size: Integer)
GET     /store/getByStatusStore/:StatusStore/:order controllers.Stores.getByStatusStore(StatusStore: String, order:String )
POST    /store                          controllers.Stores.create()
PUT     /store                          controllers.Stores.update()
DELETE  /store/:id                      controllers.Stores.delete(id : Long)


# parte de seguridad y manejo de user

#Zona de Seguridad
POST    /role/getmenu               controllers.Roles.getMenu()
POST    /route/checkngroute         controllers.SecurityRoutes.CheckNgRoute()

# User
GET     /user/findByEmail/:email    controllers.Users.findByEmail(email: String)
#POST   /user/uploadPhoto           controllers.Users.uploadPhoto()
POST    /user/login                 controllers.Users.login()
POST    /user/auth/:path            controllers.Users.authorize(path: String)
GET     /user/reset/:email          controllers.Users.startResetPassword(email: String)
PUT     /user/reset                 controllers.Users.handleStartResetPassword()
GET     /user/verify                controllers.Users.verify
#GET     /user/reset/:mailToken     controllers.PasswordReset.resetPassword(mailToken)
#POST    /user/reset/:mailToken     controllers.PasswordReset.handleResetPassword(mailToken)
GET     /user/find                  controllers.Users.findByEmail(email: String)

